<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract local variable &apos;count&apos; from expression &apos;employeeList.stream().filter(i -&gt; i.getGender().equals(&quot;Male&quot;)).count()&apos;&#x0D;&#x0A;- Original project: &apos;Java-08-Fearture&apos;&#x0D;&#x0A;- Variable name: &apos;count&apos;&#x0D;&#x0A;- Destination method: &apos;com.uj.stream.StreamApiQuestion.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().filter(i -&gt; i.getGender().equals(&quot;Male&quot;)).count()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;count&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.uj.stream{StreamApiQuestion.java" name="count" replace="true" selection="382 0" stamp="1706089677908" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getGender,Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;Java-08-Fearture&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.uj.stream.StreamApiQuestion.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getGender,Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.uj.stream{StreamApiQuestion.java" name="collect" replace="true" selection="938 0" stamp="1706090154079" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment,Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;Java-08-Fearture&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.uj.stream.StreamApiQuestion.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment,Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.uj.stream{StreamApiQuestion.java" name="collect" replace="true" selection="1349 0" stamp="1706090867053" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;map2&apos; from expression &apos;employeeList.stream().map(Employee::getDepartment)&apos;&#x0D;&#x0A;- Original project: &apos;Java-08-Fearture&apos;&#x0D;&#x0A;- Variable name: &apos;map2&apos;&#x0D;&#x0A;- Destination method: &apos;com.uj.stream.StreamApiQuestion.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().map(Employee::getDepartment)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;map2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.uj.stream{StreamApiQuestion.java" name="map2" replace="true" selection="1570 0" stamp="1706091139093" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getGender,Collectors.averagingInt(Employee::getAge)))&apos;&#x0D;&#x0A;- Original project: &apos;Java-08-Fearture&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.uj.stream.StreamApiQuestion.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getGender,Collectors.averagingInt(Employee::getAge)))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.uj.stream{StreamApiQuestion.java" name="collect" replace="true" selection="1911 0" stamp="1706092121727" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;max&apos; from expression &apos;employeeList.stream().filter(e -&gt; e.getSalary()).max(new SalaryComparator())&apos;&#x0D;&#x0A;- Original project: &apos;Java-08-Fearture&apos;&#x0D;&#x0A;- Variable name: &apos;max&apos;&#x0D;&#x0A;- Destination method: &apos;com.uj.stream.StreamApiQuestion.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().filter(e -&gt; e.getSalary()).max(new SalaryComparator())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;max&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.uj.stream{StreamApiQuestion.java" name="max" replace="true" selection="2338 0" stamp="1706092965038" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employeeList.stream().collect(Collectors.maxBy(Comparator.comparingDouble(Employee::getSalary)))&apos;&#x0D;&#x0A;- Original project: &apos;Java-08-Fearture&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.uj.stream.StreamApiQuestion.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().collect(Collectors.maxBy(Comparator.comparingDouble(Employee::getSalary)))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.uj.stream{StreamApiQuestion.java" name="collect" replace="true" selection="2815 0" stamp="1706095041743" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect2&apos; from expression &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment,Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;Java-08-Fearture&apos;&#x0D;&#x0A;- Variable name: &apos;collect2&apos;&#x0D;&#x0A;- Destination method: &apos;com.uj.stream.StreamApiQuestion.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment,Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.uj.stream{StreamApiQuestion.java" name="collect2" replace="true" selection="3567 0" stamp="1706095615101" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect3&apos; from expression &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment,Collectors.averagingDouble(Employee::getSalary)))&apos;&#x0D;&#x0A;- Original project: &apos;Java-08-Fearture&apos;&#x0D;&#x0A;- Variable name: &apos;collect3&apos;&#x0D;&#x0A;- Destination method: &apos;com.uj.stream.StreamApiQuestion.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment,Collectors.averagingDouble(Employee::getSalary)))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect3&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.uj.stream{StreamApiQuestion.java" name="collect3" replace="true" selection="3926 0" stamp="1706095800499" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect4&apos; from expression &apos;employeeList.stream().filter(e -&gt; e.getDepartment().equalsIgnoreCase(&quot;Development&quot;)).collect(Collectors.minBy(Comparator.comparingInt(Employee::getAge)))&apos;&#x0D;&#x0A;- Original project: &apos;Java-08-Fearture&apos;&#x0D;&#x0A;- Variable name: &apos;collect4&apos;&#x0D;&#x0A;- Destination method: &apos;com.uj.stream.StreamApiQuestion.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().filter(e -&gt; e.getDepartment().equalsIgnoreCase(&quot;Development&quot;)).collect(Collectors.minBy(Comparator.comparingInt(Employee::getAge)))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect4&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.uj.stream{StreamApiQuestion.java" name="collect4" replace="true" selection="4406 0" stamp="1706096119379" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;min&apos; from expression &apos;employeeList.stream().min(Comparator.comparingInt(Employee::getYearOfJoining))&apos;&#x0D;&#x0A;- Original project: &apos;Java-08-Fearture&apos;&#x0D;&#x0A;- Variable name: &apos;min&apos;&#x0D;&#x0A;- Destination method: &apos;com.uj.stream.StreamApiQuestion.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().min(Comparator.comparingInt(Employee::getYearOfJoining))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;min&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.uj.stream{StreamApiQuestion.java" name="min" replace="true" selection="4894 0" stamp="1706096458787" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect5&apos; from expression &apos;employeeList.stream().filter(e -&gt; e.getDepartment().equalsIgnoreCase(&quot;Sales&quot;)).collect(Collectors.groupingBy(Employee::getGender,Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;Java-08-Fearture&apos;&#x0D;&#x0A;- Variable name: &apos;collect5&apos;&#x0D;&#x0A;- Destination method: &apos;com.uj.stream.StreamApiQuestion.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().filter(e -&gt; e.getDepartment().equalsIgnoreCase(&quot;Sales&quot;)).collect(Collectors.groupingBy(Employee::getGender,Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect5&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.uj.stream{StreamApiQuestion.java" name="collect5" replace="true" selection="5437 0" stamp="1706096788637" varType="false" version="1.0"/>
</session>