package com.uj.restcontroller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.uj.entity.Product;
import com.uj.entity.ProductCategory;
import com.uj.service.IAdminOperation;

@RestController
@RequestMapping("/admin")
public class AdminController {

	private IAdminOperation service;
	
	@Autowired
	public AdminController(IAdminOperation service) {
		this.service = service;
	}
	
	//category operation
	@PostMapping("/create")
	public ResponseEntity<String> saveCategory(@RequestBody ProductCategory category){
		Boolean saveCategory = service.saveCategory(category);
		if(saveCategory) {
			return new ResponseEntity<String>(category.getCategory()+" Category saved",HttpStatus.CREATED);
		}
		else {
			return new ResponseEntity<String>(category.getCategory()+" Category not saved",HttpStatus.OK);
		}
	}
	
	@PutMapping("update/{id}")
	public ResponseEntity<String> upadateCategory(@PathVariable("id") Integer id,
			@RequestBody ProductCategory category){
		Boolean updateCategory = service.updateCategory(id, category);
		if(updateCategory) {
			return new ResponseEntity<String>(category.getCategory()+" Category updated",HttpStatus.OK);
		}
		else {
			return new ResponseEntity<String>(category.getCategory()+" Category not updated",HttpStatus.OK);
		}
	} 
	
	@DeleteMapping("delete/{id}")
	public ResponseEntity<String> deleteCategoryById(@PathVariable("id") Integer id) {
		Integer deleteCategoryById = service.deleteCategoryById(id);
		if(deleteCategoryById!=null)
			return new ResponseEntity<String>("Category deleted of id "+id,HttpStatus.OK);
		else
			return new ResponseEntity<String>("Category not deleted of id "+id,HttpStatus.OK);

	}
	
	@DeleteMapping("deleteAll")
	public ResponseEntity<String> deleteAllCategory() {
		service.deleteAllCategory();
		
		return new ResponseEntity<String>("All Category deleted",HttpStatus.OK);
	}
	
	@GetMapping("get/{id}")
	public ResponseEntity<?> getCategoryById(@PathVariable("id") Integer id) {
		ProductCategory productCategory = service.getCategoryById(id);
		if(productCategory!=null)
			return new ResponseEntity<ProductCategory>(productCategory,HttpStatus.OK);
		else
			return new ResponseEntity<String>("Something Went wrong...",HttpStatus.OK);

	}
	
	@GetMapping("getAll")
	public ResponseEntity<?> getAllCategory() {
		List<ProductCategory> allCategory = service.getAllCategory();
		if(!allCategory.isEmpty())
			return new ResponseEntity<List<ProductCategory>>(allCategory,HttpStatus.OK);
		else {
			return new ResponseEntity<String>("Something went wrong...",HttpStatus.OK);

		}
	}
	
	//product operation
	@PostMapping("/create")
	public ResponseEntity<String> saveProduct(@RequestBody Product product){
		Boolean saveProduct = service.saveProduct(product);
		if(saveProduct) {
			return new ResponseEntity<String>(product.getProductName()+" Product saved",HttpStatus.CREATED);
		}
		else {
			return new ResponseEntity<String>(cproduct.getProductName()+" Product not saved",HttpStatus.OK);
		}
	}
	
	@PutMapping("update/{id}")
	public ResponseEntity<String> upadateCategory(@PathVariable("id") Integer id,
			@RequestBody ProductCategory category){
		Boolean updateCategory = service.updateCategory(id, category);
		if(updateCategory) {
			return new ResponseEntity<String>(category.getCategory()+" Category updated",HttpStatus.OK);
		}
		else {
			return new ResponseEntity<String>(category.getCategory()+" Category not updated",HttpStatus.OK);
		}
	} 
	
	@DeleteMapping("delete/{id}")
	public ResponseEntity<String> deleteCategoryById(@PathVariable("id") Integer id) {
		Integer deleteCategoryById = service.deleteCategoryById(id);
		if(deleteCategoryById!=null)
			return new ResponseEntity<String>("Category deleted of id "+id,HttpStatus.OK);
		else
			return new ResponseEntity<String>("Category not deleted of id "+id,HttpStatus.OK);

	}
	
	@DeleteMapping("deleteAll")
	public ResponseEntity<String> deleteAllCategory() {
		service.deleteAllCategory();
		
		return new ResponseEntity<String>("All Category deleted",HttpStatus.OK);
	}
	
	@GetMapping("get/{id}")
	public ResponseEntity<?> getCategoryById(@PathVariable("id") Integer id) {
		ProductCategory productCategory = service.getCategoryById(id);
		if(productCategory!=null)
			return new ResponseEntity<ProductCategory>(productCategory,HttpStatus.OK);
		else
			return new ResponseEntity<String>("Something Went wrong...",HttpStatus.OK);

	}
	
	@GetMapping("getAll")
	public ResponseEntity<?> getAllCategory() {
		List<ProductCategory> allCategory = service.getAllCategory();
		if(!allCategory.isEmpty())
			return new ResponseEntity<List<ProductCategory>>(allCategory,HttpStatus.OK);
		else {
			return new ResponseEntity<String>("Something went wrong...",HttpStatus.OK);

		}
	}
	
	
}
