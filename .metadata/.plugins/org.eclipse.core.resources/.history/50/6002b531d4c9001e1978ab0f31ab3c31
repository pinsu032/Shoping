package com.uj.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.uj.dto.RoleChange;
import com.uj.entity.Product;
import com.uj.entity.ProductCategory;
import com.uj.fiegn.UserFiegnClinet;
import com.uj.repo.ProductCategoryRepo;
import com.uj.repo.ProductRepo;

@Service
public class AdminOperation implements IAdminOperation {
	
	private ProductCategoryRepo cRepo;
	
	private ProductRepo pRepo;
	
	private UserFiegnClinet client;
	
	private static List<ProductCategory> allcategories = new ArrayList<>();
	
	@Autowired
	public AdminOperation(ProductCategoryRepo cRepo
			, ProductRepo pRepo , UserFiegnClinet client) {
		this.cRepo = cRepo;
		this.pRepo = pRepo;
		this.client = client;
	}

	@Override
	public Boolean saveCategory(ProductCategory category) {
		ProductCategory save = cRepo.save(category);
		return save.getId()!= null;
	}

	@Override
	public Boolean updateCategory(Integer id, ProductCategory category) {
		Optional<ProductCategory> opt = cRepo.findById(id);
		if (opt.isPresent()) {
			ProductCategory productCategory = opt.get();
			category.setId(productCategory.getId());
			BeanUtils.copyProperties(category, productCategory);
			cRepo.save(productCategory);
			return true;
		} else {
			return false;
		}
	}

	@Override
	public Integer deleteCategoryById(Integer id) {
		if(cRepo.existsById(id)) {
			cRepo.deleteById(id);
			return id;
		}
		return null;
	}

	@Override
	public void deleteAllCategory() {
		cRepo.deleteAll();
	}

	@Override
	public ProductCategory getCategoryById(Integer id) {
        Optional<ProductCategory> opt = cRepo.findById(id); 
        if(opt.isPresent()) {
        	ProductCategory productCategory = opt.get();
        	Set<Product> pSet = pRepo.getByCategoryId(productCategory.getId());
        	//productCategory.setProduct(pSet);
        	ProductCategory cat = new ProductCategory();
        	
        	BeanUtils.copyProperties(productCategory, cat);
        	cat.setProduct(pSet);
        	return cat;
        }
		return null;
	}

	@Override
	public List<ProductCategory> getAllCategory() {
		
		if(!catList.isEmpty())
		     return catList;
		else
			return null;
	}
	
	private List<ProductCategory> allCategory(){
		List<ProductCategory> catList = cRepo.findAll();

		catList.forEach(category -> {
			categories.add(category.getCategory());
		});
		return catList;
	}
	
	@Override
	public List<String> getCategories() {
		
		return null;
	}

	@Override
	public Boolean saveProduct(Product product) {
		String category = product.getProductType();
		ProductCategory productCategory = cRepo.findByCategory(category);
		
		ProductCategory pCategory = new ProductCategory();
		pCategory.setId(productCategory.getId());
		
		product.setProductCategory(pCategory);
		Product save = pRepo.save(product);
		return save.getPid()!= null;
	}

	@Override
	public Boolean updateProduct(Integer id, Product product) {
		Optional<Product> opt = pRepo.findById(id);
		if (opt.isPresent()) {
			pRepo.save(product);
			return true;
		} else {
			return false;
		}
	}

	@Override
	public Integer deleteProductById(Integer id) {
		if(pRepo.existsById(id)) {
			pRepo.deleteById(id);
			return id;
		}
		return null;
	}

	@Override
	public void deleteAllProduct() {
		pRepo.deleteAll();
	}

	@Override
	public Product getProductById(Integer id) {
		Optional<Product> opt = pRepo.findById(id);
        if(opt.isPresent()) {
        	return opt.get();
        }
		return null;
	}

	@Override
	public List<Product> getAllProduct() {
		List<Product> pList = pRepo.findAll();
		if(!pList.isEmpty())
		     return pList;
		else
			return null;
	}

	@Override
	public String grantRoleOfUser(Integer id,RoleChange role) {
        String changeRole = client.changeRole(id, role);
		return changeRole;
	}
	
	
}
